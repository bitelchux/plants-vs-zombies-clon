'''
Created on 17/12/2011

@author: eysenck
'''
import pygame
from pygame.locals import *
from unidades.atacantes import Zombie
from unidades.neutrales import Sol
import time
import os
import sys
import pytweener
import random

class Director(object):
    __singleton = None
    def __new__(cls, *args, **kargs):
        if cls.__singleton is None:
            cls.__singleton = object.__new__(cls, *args, **kargs)
        return cls.__singleton
    def __init__(self):
        os.environ['SDL_VIDEO_CENTERED'] = '1'
        pygame.init()
        pygame.display.set_caption("Plantas vs Zombies CLON by Eyscode")
        self.__escenas = []
        self.__corriendo = True
        self.pantalla = pygame.display.set_mode((1000, 750))
        self.clock = pygame.time.Clock()
    def add_escena(self, escena):
        self.__escenas.append(escena)
        self.__corriendo = True
    def set_escena(self, escena):
        self.__corriendo = True
        del self.__escenas
        self.__escenas = [escena]
    def loop(self):
        while self.__corriendo:
            time = self.clock.tick(60)
            self.__escenas[-1].actualizar(time)
            self.__escenas[-1].dibujar(self.pantalla)
            for evento in pygame.event.get():
                self.__escenas[-1].verificar_eventos(evento)
            pygame.display.update()
    def mostrar_mensaje(self):
        pass
    def salir(self):
        self.__corriendo = False
    @property
    def escena_actual(self):
        return self.__escenas[-1]
    
class Escena:
    def __init__(self, director):
        self.director = director
    def dibujar(self, superficie):
        pass
    def actualizar(self, tiempo):
        pass
    def verificar_eventos(self, evento):
        pass

class EnJuego(Escena):
    def __init__(self, director, filas_validas = (0, 1, 2, 3, 4), imagen = None, atacantes = {Zombie:10}):
        Escena.__init__(self, director)
        self.fondo = pygame.image.load(imagen) if imagen != None else pygame.image.load("recursos/fondo.jpg")
        self.filas_validas = filas_validas
        self.defensas = []
        self.atacantes = []
        self.balas = []
        self.solsitos = []
        self.tablero = [[0 for col in range(9)] for row in range(5)]
        self.barra = BarraControl(self.director)
        self.imagen_cartas = pygame.image.load("recursos/cartas.png")
        self.imagen_charge = pygame.image.load("recursos/charge.png")
        self.imagen_nosoles = pygame.image.load("recursos/nosoles.png")
        self.seleccion = None
        self.intervalo_tirar = 9
        self.crono_i_t = pygame.time.get_ticks()
        self.por_venir = atacantes
        self.intervalo_zombie = random.randint(18, 20)
        self.crono_i_z = pygame.time.get_ticks()
    def poner_zombie(self):
        index = random.randint(0, len(self.por_venir) - 1)
        clase = self.por_venir.keys()[index]
        i = random.randint(0, 4)
        if self.por_venir[clase] > 0:
            self.atacantes.append(clase(self.director, i))
            self.por_venir[clase] -= 1
    def dibujar(self, superficie):
        superficie.blit(self.fondo, (0, 0))
        self.barra.dibujar(superficie)
        for d in self.defensas:
            d.dibujar(superficie)
        for a in self.atacantes:
            a.dibujar(superficie)
        for b in self.balas:
            b.dibujar(superficie)
        for s in self.solsitos:
            s.dibujar(superficie)
        if self.seleccion: self.seleccion.dibujar(superficie)
    def actualizar(self, tiempo):
        self.barra.actualizar(tiempo)
        for d in self.defensas:
            d.actualizar(tiempo)
        for b in self.balas:
            b.actualizar(tiempo)
            atc = pygame.sprite.spritecollideany(b, self.atacantes)
            if atc:
                atc.salud -= b.danio
                self.balas.remove(b)
        for a in self.atacantes:
            a.actualizar(tiempo)
        for s in self.solsitos:
            s.actualizar(tiempo)
        if self.seleccion: self.seleccion.actualizar(tiempo)
        if pygame.time.get_ticks() - self.crono_i_t > self.intervalo_tirar * 1000:
            self.crono_i_t = pygame.time.get_ticks()
            self.aparece_solsito()
        if pygame.time.get_ticks() - self.crono_i_z > self.intervalo_zombie * 1000:
            self.crono_i_z = pygame.time.get_ticks()
            self.intervalo_zombie = random.randint(5, 7)
            self.poner_zombie()
        self.atacantes.sort(key = lambda atacante: atacante.i)
    def verificar_eventos(self, evento):
        if evento.type == QUIT:
            self.director.salir()
        elif evento.type == MOUSEBUTTONDOWN and evento.button == 1:
            if self.seleccion: 
                self.plantar(self.seleccion.clase, pygame.mouse.get_pos())
                self.seleccion = None
            else:
                self.barra.verificar_eventos(evento)
            for sol in self.solsitos:
                if sol.rect.collidepoint(pygame.mouse.get_pos()[0], pygame.mouse.get_pos()[1]):
                    sol.recolectar()
    def plantar(self, defensor, (x , y)):
        i = (y - 150) / 120
        j = (x - 50) / 100
        if i in self.filas_validas and 0 <= j <= 8:
            if self.tablero[i][j] == 0:
                self.tablero[i][j] = 1
                self.defensas.append(defensor(self.director, i, j))
                self.barra.soles -= self.seleccion.carta.precio
                self.seleccion.slot.cargar()
        else:
            self.seleccion.slot.falta_cargar = 0
    def aparece_solsito(self):
        x, y = random.randint(100, 950), random.randint(210, 690)
        self.solsitos.append(Sol(self.director, x, y))

class BarraControl:
    def __init__(self, director):
        self.director = director
        self.imagen = pygame.image.load("recursos/barra.png").convert_alpha()
        self.slots = [Slot(self.director, pygame.Rect(138 + a, 11, 85, 121)) for a in range(0, 600, 100)]
        self.soles = 50
        self.nro_soles = pygame.font.Font.render(pygame.font.Font(None, 50), str(self.soles), 1, (0, 0, 0))
        self.rect_soles = self.nro_soles.get_rect()
    def dibujar(self, superficie):
        superficie.blit(self.imagen, (0, 0))
        for slot in self.slots:
            slot.dibujar(superficie)
        superficie.blit(self.nro_soles, self.rect_soles)
    def actualizar(self, tiempo):
        for slot in self.slots:
            slot.actualizar(tiempo)
        self.nro_soles = pygame.font.Font.render(pygame.font.Font(None, 40), str(self.soles), 1, (0, 0, 0))
        self.rect_soles = self.nro_soles.get_rect()
        self.rect_soles.center = 66, 122
    def verificar_eventos(self, evento):
        if evento.type == MOUSEBUTTONDOWN and evento.button == 1:
            for slot in self.slots:
                if slot.rect.collidepoint(evento.pos[0], evento.pos[1]):
                    if slot.carta and self.director.escena_actual.seleccion == None and slot.cargando == False:
                        if self.director.escena_actual.barra.soles >= slot.carta.precio:
                            self.director.escena_actual.seleccion = PlantaSeleccionada(slot)
                            slot.oscurecer()
                    else:
                        self.director.escena_actual.seleccion = None
                    break
    def agregar_carta(self, carta):
        for slot in self.slots:
            if slot.carta == None:
                slot.carta = carta
                break
            
class Carta:
    def __init__(self, rect, rect2, cls, precio, tiempo_charge = 3):
        self.rect_origen_carta = rect
        self.rect_origen_imagen = rect2
        self.clase = cls
        self.precio = precio
        self.tiempo_charge = tiempo_charge

class Slot:
    def __init__(self, director, rect):
        self.director = director
        self.carta = None
        self.rect = rect
        self.cargando = False
        self.rect_charge = pygame.Rect(0, 0, self.rect.width, 0)
        self.tweener = pytweener.Tweener()
        self.falta_cargar = 0
    def dibujar(self, superficie):
        if self.carta: 
            superficie.blit(self.director.escena_actual.imagen_cartas, self.rect, self.carta.rect_origen_carta)
            if self.director.escena_actual.barra.soles < self.carta.precio: superficie.blit(self.director.escena_actual.imagen_nosoles, self.rect)
        superficie.blit(self.director.escena_actual.imagen_charge, self.rect, self.rect_charge)
    def actualizar(self, tiempo):
        self.rect_charge.height = self.falta_cargar
        if self.tweener.hasTweens():
            self.tweener.update(tiempo / 1000.0)
    def oscurecer(self):
        self.falta_cargar = self.rect.height
    def cargar(self):
        if self.carta:
            self.tweener.addTween(self, falta_cargar = 0, tweenTime = self.carta.tiempo_charge, tweenType = pytweener.Easing.Linear.easeIn, onCompleteFunction = self.terminar_cargado)
            self.cargando = True
    def terminar_cargado(self):
        self.cargando = False
        self.falta_cargar = 0
        
class PlantaSeleccionada:
    def __init__(self, slot):
        self.slot = slot
        self.carta = slot.carta
        self.imagen = pygame.image.load(self.carta.clase.url_imagen)
        self.rect = pygame.Rect(0, 0, 100, 120)
        self.clase = self.carta.clase
    def dibujar(self, superficie):
        superficie.blit(self.imagen, self.rect, self.carta.rect_origen_imagen)
    def actualizar(self, tiempo):
        self.rect.centerx, self.rect.centery = pygame.mouse.get_pos()
        
class Pausa(Escena):
    def __init__(self):
        pass
